<model
  xmlns="http://codehaus-plexus.github.io/MODELLO/1.8.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://codehaus-plexus.github.io/MODELLO/1.8.0 http://codehaus-plexus.github.io/modello/xsd/modello-1.8.0.xsd"
  java.suppressAllWarnings="false"
  xml.namespace="https://resources.infrastructurebuilder.org/PackerManifest/${version}"
  xml.schemaLocation="https://resources.infrastructurebuilder.org/xsd/PackerManifest-${version}"
  xsd.namespace="https://resources.infrastructurebuilder.org/PackerManifest/${version}"
  xsd.targetNamespace="https://resources.infrastructurebuilder.org/PackerManifest/${version}"
>
  <!-- namespaces above are all placeholders -->
  <id>imagingcomponentpacker</id>
  <name>PackerManifest</name>
  <description>Manifest persistence tooling for packer manifest</description>
  <defaults>
    <default>
      <key>package</key>
      <value>${project.groupId}.model</value>
    </default>
  </defaults>
  <versionDefinition>
    <type>field+namespace</type>
    <value>modelVersion</value>
  </versionDefinition>
  <classes>
    <!-- MODEL -->



    <class
      xml.tagName="specificData"
      rootElement="true"
      java.clone.hook="mutatingCloneHook"
      java.clone="deep"
    >
      <name>PackerSpecificExecution</name>
      <version>0.9.0+</version>
      <interfaces>
        <interface>
 <![CDATA[org.infrastructurebuilder.automation.IBRSpecificExecution]]>
        </interface>
      </interfaces>
      <description>
        <![CDATA[
        The <code>&lt;specificData&gt;</code> element contains information about a packer execution
        ]]>
      </description>
      <fields>
        <!-- ====================================================================== -->
        <!-- Manifest Version -->
        <!-- ====================================================================== -->
        <field xml.attribute="true">
          <name>modelVersion</name>
          <version>0.9.0+</version>
          <required>true</required>
          <description>Model version. </description>
          <type>String</type>
        </field>
        <field xml.attribute="true">
          <name>type</name>
          <version>0.9.0+</version>
          <required>true</required>
          <description>Specific Type of this execution data</description>
          <type>String</type>
          <defaultValue>packer</defaultValue>
        </field>
        <field>
          <name>gav</name>
          <required>true</required>
          <version>0.9.0+</version>
          <association>
            <type>Dependency</type>
            <multiplicity>1</multiplicity>
          </association>
        </field>
        <field>
          <name>images</name>
          <version>0.9.0+</version>
          <description>associated images</description>
          <association>
            <type>PackerImage</type>
            <multiplicity>*</multiplicity>
          </association>

        </field>
      </fields>
      <codeSegments>
        <codeSegment>
          <version>0.9.0+</version>
          <code>
            <![CDATA[


  @Override
  public org.codehaus.plexus.util.xml.Xpp3Dom getSpecificExecutionAsDom() {
    // TODO Auto-generated method stub
    return new org.codehaus.plexus.util.xml.Xpp3Dom(getType());
  }



            ]]>
          </code>
        </codeSegment>

        <codeSegment>
          <version>0.9.0+</version>
          <code>
            <![CDATA[





            ]]>
          </code>
        </codeSegment>

        <codeSegment>
          <version>0.9.0+</version>
          <code>
            <![CDATA[
            // Clone hooks

  private void mutatingCloneHook(PackerSpecificExecution s) {
    s.setType("packer");
  }

  ]]>
          </code>
        </codeSegment>

        <codeSegment>
          <version>0.9.0+</version>
          <code>
            <![CDATA[
            // hash and equals


  @Override
  public int hashCode() {
    return java.util.Objects.hash(
        modelVersion
        ,type
        , gav
        );
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (!(obj instanceof PackerSpecificExecution))
      return false;
    PackerSpecificExecution other = (PackerSpecificExecution) obj;
    return
           java.util.Objects.equals(modelVersion, other.modelVersion)
        && java.util.Objects.equals(type, other.type)
        && java.util.Objects.equals(gav, other.gav)
        ;
  }

            ]]>
          </code>
        </codeSegment>

      </codeSegments>
    </class>
    <class
      xml.tagName="data"
      java.clone="deep"
    >
      <name>PackerExecution</name>
      <version>0.9.0+</version>
      <interfaces>
      <!--
        <interface><![CDATA[org.infrastructurebuilder.automation.IBRDependentExecution]]></interface>
       -->
      </interfaces>
      <fields>
        <field>
          <name>parent</name>
          <version>0.9.0+</version>
          <association>
            <type>PackerSpecificExecution</type>
            <multiplicity>1</multiplicity>
          </association>
        </field>

        <field>
          <name>builderId</name>
          <version>0.9.0+</version>
          <required>true</required>
          <type>String</type>
          <description>ID of builder</description>
        </field>
        <field>
          <name>id</name>
          <type>String</type>
          <version>0.9.0+</version>
          <required>true</required>
          <description>Id of the execution</description>
        </field>
        <field>
          <name>index</name>
          <version>0.9.0+</version>
          <required>true</required>
          <description>Individually addressable execution data</description>
          <type>int</type>
        </field>
        <field>
          <name>files</name>
          <version>0.9.0+</version>
          <required>false</required>
          <description>Files produces by this execution</description>
          <association>
            <type>PackerFile</type>
            <multiplicity>*</multiplicity>
          </association>
        </field>
        <field>
          <name>target</name>
          <required>true</required>
          <type>String</type>
        </field>
        <field>
          <name>targetGAV</name>
          <version>0.9.0+</version>
          <required>true</required>
          <association>
            <type>Dependency</type>
            <multiplicity>1</multiplicity>
          </association>
          <type>String</type>
        </field>
        <field>
          <name>idMap</name>
          <required>false</required>
          <type>Map</type>
          <association>
            <type>String</type>
            <multiplicity>*</multiplicity>
          </association>
        </field>


      </fields>
      <codeSegments>
        <codeSegment>
          <version>0.9.0+</version>
          <code>
            <![CDATA[
    public PackerExecution() {
    }

    ]]>
          </code>
        </codeSegment>
        <codeSegment>
          <version>0.9.0+</version>
          <code>
            <![CDATA[

    public PackerExecution(PackerExecution o) {
      this();
      this.id = o.id;
      this.builderId = o.builderId;
      this.index = o.index;
      this.target = o.target;
      this.targetGAV = o.targetGAV;
      if (o.files != null) {
        this.files = new java.util.ArrayList<>();
        this.files.addAll( o.files.stream().map(f -> f.clone()).collect(java.util.stream.Collectors.toList()));
      }
      if (o.idMap != null) {
        this.idMap = new java.util.HashMap<>();
        this.idMap.putAll( o.idMap);
      }
    }

    ]]>
          </code>
        </codeSegment>

        <codeSegment>
          <version>0.9.0+</version>
          <code>
            <![CDATA[


            ]]>
          </code>
        </codeSegment>

        <codeSegment>
          <version>0.9.0+</version>
          <code>
            <![CDATA[
    @Override
    public int hashCode() {
      return java.util.Objects.hash(
        builderId
        );
    }

    @Override
    public boolean equals(Object obj) {
      if (this == obj)
        return true;
      if (!(obj instanceof PackerExecution))
        return false;
      PackerExecution other = (PackerExecution) obj;
      return
             java.util.Objects.equals(builderId, other.builderId)
          && java.util.Objects.equals(id, other.id);
    }


    ]]>
          </code>
        </codeSegment>

      </codeSegments>
    </class>

    <class java.clone="deep">
      <name>PackerFile</name>
      <version>0.9.0+</version>
      <fields>
        <field>
          <name>parent</name>
          <version>0.9.0+</version>
          <association>
            <type>PackerExecution</type>
            <multiplicity>1</multiplicity>
          </association>
        </field>

        <field>
          <name>name</name>
          <version>0.9.0+</version>
          <required>true</required>
          <description>file name</description>
          <type>String</type>
        </field>
        <field>
          <name>size</name>
          <version>0.9.0+</version>
          <required>true</required>
          <description>file length</description>
          <type>long</type>
        </field>
      </fields>
      <codeSegments>
        <codeSegment>
          <version>0.9.0+</version>
          <code>
            <![CDATA[

    ]]>
          </code>
        </codeSegment>

      </codeSegments>
    </class>

    <class
      xml.tagName="gav"
      java.clone="deep"
    >
      <name>Dependency</name>
      <version>0.9.0+</version>
      <interfaces>
        <interface>org.infrastructurebuilder.util.core.GAV</interface>
      </interfaces>
      <fields>
        <field xml.attribute="true">
          <name>groupId</name>
          <version>0.9.0+</version>
          <required>true</required>
          <description>Group ID</description>
          <type>String</type>
        </field>
        <field xml.attribute="true">
          <name>artifactId</name>
          <version>0.9.0+</version>
          <required>true</required>
          <description>ArtifactId ID</description>
          <type>String</type>
        </field>
        <field
          java.getter="false"
          xml.attribute="true"
        >
          <name>version</name>
          <version>0.9.0+</version>
          <required>true</required>
          <description>version</description>
          <type>String</type>
        </field>
        <field xml.attribute="true">
          <name>extension</name>
          <version>0.9.0+</version>
          <required>true</required>
          <description>extension (not type-mapped)</description>
          <type>String</type>
        </field>
        <field
          java.getter="false"
          xml.attribute="true"
        >
          <name>classifier</name>
          <version>0.9.0+</version>
          <required>false</required>
          <description>Addl classifier</description>
          <type>String</type>
        </field>
      </fields>
      <codeSegments>
        <codeSegment>
          <version>0.9.0+</version>
          <code>
            <![CDATA[

  public Dependency() {
  }
  public Dependency(org.infrastructurebuilder.util.core.GAV g) {
    this.groupId = g.getGroupId();
    this.artifactId = g.getArtifactId();
    this.version = g.getVersion().orElse(null);
    this.classifier = g.getClassifier().orElse(null);
    this.extension = g.getExtension();
  }

  public Dependency copy() {
    return new Dependency(this);
  }

  public java.util.Optional<String> getVersion() {
    return java.util.Optional.ofNullable(this.version);
  }

  public java.util.Optional<String> getClassifier() {
    return java.util.Optional.ofNullable(this.classifier);
  }

  @Override
    public int hashCode() {
      return java.util.Objects.hash(groupId, artifactId, classifier, extension, version);
    }

    @Override
    public boolean equals(Object obj) {
      if (this == obj)
        return true;
      if (obj == null)
        return false;
      if (getClass() != obj.getClass())
        return false;
      Dependency other = (Dependency) obj;
      return
             java.util.Objects.equals(groupId, other.groupId)
          && java.util.Objects.equals(artifactId, other.artifactId)
          && java.util.Objects.equals(classifier, other.classifier)
          && java.util.Objects.equals(extension, other.extension)
          && java.util.Objects.equals(version, other.version);
    }

  @Override
    public String toString() {
      return "[Packer]GAV [groupId=" + groupId + ", artifactId=" + artifactId + ", version=" + version + ", extension="
          + extension + ", classifier=" + classifier + "]";
    }

    ]]>
          </code>
        </codeSegment>

      </codeSegments>
    </class>
    <class
      xml.tagName="imageMap"
      java.clone="deep"
    >
      <name>PackerImage</name>
      <version>0.9.0+</version>
      <interfaces>
        <interface>org.infrastructurebuilder.automation.IBRImage</interface>
      </interfaces>
      <fields>
        <field>
          <name>identifier</name>
          <version>0.9.0+</version>
          <required>true</required>
          <description>Identifier</description>
          <type>String</type>
        </field>
        <field>
          <name>mappedRegion</name>
          <version>0.9.0+</version>
          <required>true</required>
          <description>Mapped region for type</description>
          <type>String</type>
        </field>
        <field>
          <name>dialect</name>
          <version>0.9.0+</version>
          <required>true</required>
          <description>Dialect (ie Cloud provider)</description>
          <type>String</type>
        </field>
      </fields>
      <codeSegments>
        <codeSegment>
          <version>0.9.0+</version>
          <code>
            <![CDATA[
    public PackerImage() {
    }

    public PackerImage(org.infrastructurebuilder.automation.IBRImage g) {
      this.identifier = g.getIdentifier();
      this.mappedRegion = g.getMappedRegion();
      this.dialect = g.getDialect();
    }

    @Override
    public int hashCode() {
      return java.util.Objects.hash(identifier, mappedRegion, dialect);
    }

    @Override
    public boolean equals(Object obj) {
      if (this == obj)
        return true;
      if (obj == null)
        return false;
      if (getClass() != obj.getClass())
        return false;
      PackerImage other = (PackerImage) obj;
      return java.util.Objects.equals(identifier, other.identifier)
          && java.util.Objects.equals(mappedRegion, other.mappedRegion)
          && java.util.Objects.equals(dialect, other.dialect);
    }

    ]]>
          </code>
        </codeSegment>

      </codeSegments>
    </class>



  </classes>
</model>